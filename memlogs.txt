toTX
##RAMDISK ENV:
	setenv ramargs 'setenv bootargs root=/dev/ram rw console=ttyS0,115200 mem=2048M'
	setenv bootcmd 'run ramargs; bootm 0xEC020000 0xED300000 0xEC800000'
	saveenv

##PCI in uboot:
	pci header 3.0.0

##to get mkfs in kernal:
	Ex) Add the following to build/conf/local.conf IMAGE_INSTALL_append = " e2fsprogs"

##Create partition table:
	fdisk /dev/mmcblk
	p-print partition
	n-create partition
	w-write partition
	
##Check serial port
	stty -F /dev/ttyACM0

##Formating block devices:
	mkfs.ext2 /dev/mmcblk0p1

<<<<<<< HEAD
##Check serial port
	stty -F /dev/ttyACM0
=======
##WiFi command line:
Enter in wpa client interactive mode
	# wpa_cli
	List available access points:
		> scan
		> scan_results
	Add your AP:
		> add_network
		> set_network 0 ssid "vodafone817E"
		> set_network 0 psk "my-pass-phrase"
	Select it as current:
		> enable_network 0
	Connect to it:
		> reconnect
	Check the status:
		> status
	Exit wpa_cli:
		> quit

##Set system time:
	enter command
		date --set "2019-1-28 19:32"
	to sync hwclock to current sys time
		hwclock --syntohc
>>>>>>> e14f8e6801bf550abcd987fcea001065e29a6f28

##Git bundle/backup:
	create backup of git repo
##Git create a branch

	Create a branch in local and push data to local
		git checkout -b [name of the branch]
		git push origin [name of the branch]
	Delete a branch from  local
		git branch -b [branch name]
	then apply delete effect on remote
		git push origin :[branch name]
	git merge with other branch
		eg: master <- branch1
		git checkout master
		git merge branch
		git push origin master
	Add a remote origin for the branch 
		git remote add [remote] [name of the branch]
	Push changes from your commit into your branch
		git push [name_of_your_new_remote] [url] 

##Virtual box:
	install guest_additions in host for full screeen, clipboard,shared folder 
		sudo apt-get install virtualbox-guest-additions-iso
	then install from virual machine devices->insatll guest addition CD image
	restart vm.
##Git Start from local to server:
	goto local dir [Not required always]
		git config --global user.email thejaskoot@gmail.com
		git config --global user.user codenumb
	echo "# test" >> README.md
		git init
		git add README.md
		git commit -m "first commit"
		git remote add origin https://github.com/codenumb/test.git
		git push -u origin master
	then do normal gitting
	
##Mounting block devices:
	mount /dev/mmcblk0p1 /mnt/mmc
		git bundle create myrepo.bundle master
	restore backup
		git clone myrepo.bundle -b master repofolder
	refer:https://dzone.com/articles/git-backups-and-no-its-not
##Write protecting a file:
	Run command 
	sudo chmod a-w $filename

##SSH GUI:
	Install openssh server at the remote desktop
		sudo apt-get install openssh-server
	Install openssh client at the client
		sudo apt-get install openssh-client
	Run command from client desktop
		ssh -X usre@ipaddr
		xterm google-chrome-stable	

##configure kernel:
	bitbake virtual/kernel -c configure
	bitbake virtual/kernel -c menuconfig
	bitbake virtual/kernel -c compile -f

## DTB to DTS:
	sudo apt-get install device-tree-compiler
# $KERNEL/scripts/dtc/dtc -I dtb -O dts -o <dts_file> <dtb_file> [need device compiler]

## DTS to DTB:
	$KERNEL/scripts/dtc/dtc -I dts -O dtb -o <dtb_file> <dts_file>

##google-chrome:
	sudo apt-get install libnss3

##Install kernel api man pages:
	make mandocs
	make installmandocs

##Install kernel to Ubuntu
	sudo apt-get update && sudo apt-get install linux-image-3.5.0-40-generic linux-headers-3.5.0-40-generic linux-headers-3.5.0-40
	then update grub 
	sudo apt-gey upfa

##synapse:
	sudo add-apt-repository ppa:synapse-core/ppa 
	sudo apt-get update
	sudo apt-get install synapse

##Sublime-Text-3:
	sudo add-apt-repository ppa:webupd8team/sublime-text-3
	sudo apt-get update
	sudo apt-get install sublime-text-installer

##fsl sdk dependencies:
	sudo apt-get install g++
	//sudo apt-get install makeinfo
	sudo apt-get install texinfo
	sudo apt-get install git
	sudo apt-get install gawk
	sudo apt-get install chrpath
	sudo apt-get install libsdl1.2-dev

##fsl sdk uboot customize:
	bitbake -c cleansstate u-boot
	bitbake -c patch u-boot
	bitbake u-boot -c configure -f //not required all time
	bitbake u-boot -c compile -f
	bitbake u-boot

## new file patch:
diff -crB --new-file /home/user/QorIQ-SDK-V2.0-20160527-yocto/build_t1024rdb/tmp/work/t1024rdb-fsl-linux/u-boot-qoriq/2016.01+fslgit-r0/git/board/freescale/t102xrdb/ddr.h /home/user/001/CCC/git_uboot/board/freescale/t102xrdb/ddr.h

##TFTP install:
if echo "$answer" | grep -iq "^y" ;then
	echo Yes
	sudo mkdir -p /opt/CCC/tftp
	sudo chmod 777 -R /opt/CCC
	sudo rm -rf /etc/hosts.allow
	sudo apt-get install xinetd tftpd tftp
	sudo sh -c "echo 'service tftp
	{
	protocol        = udp
	port            = 69
	socket_type     = dgram
	wait            = yes
	user            = nobody
	server          = /usr/sbin/in.tftpd
	server_args     = /opt/CCC/tftp
	disable         = no
	}' >>   /etc/xinetd.d/tftp "
	sudo sh -c "echo 'ALL: LOCAL' >> /etc/hosts.allow"
	#sudo mkdir /tftpboot
	sudo chmod -R 777 /opt/CCC/tftp
	sudo chown -R nobody /opt/CCC/tftp
	sudo service xinetd restart

##uboot environment:
	setenv ramargs 'setenv bootargs root=/dev/mmcblk0p1 rw console=ttyS0,115200 '
	setenv bootcmd 'run ramargs; bootm 0xEC020000 0xED300000 0xEC800000'
	saveenv

##Flashing from u-boot:
	tftp 1000 fsl_fman_ucode_t1024_r1.0_108_4_5.bin
	protect off 0xeff40000 +$filesize
	erase 0xeff40000 +$filesize
	cp.b 1000 0xeff40000 $filesize
	protect on 0xeff4 0000 +$filesize

##Flash script;uboot:
	create a flash file "Flash_script"
		echo Flashing RCW...
		tftp 1000000 rcw_95_1400MHz.bin
		protect off 0xec000000 +$filesize
		erase 0xec000000 +$filesize
		cp.b 1000000 0xec000000 $filesize
		protect on 0xec000000 +$filesize
	Run command	to get Flash_script.img 
		mkimage -T script -C none -n 'Flash_script' -d Flash_script Flash_script.img
	Run the script img from uboot
	

##remove hostkey from ssh:
	ssh-keygen -f ~/.ssh/known_hosts -R 172.16.2.105


##Add a package in YOCTO in fsl-image-minimal:
	open /opt/CCC/QorIQ-SDK-V2.0-20160527-yocto/sources/meta-freescale/recipes-fsl/images/fsl-image-minimal.bb
	add package
	bitbake fsl-image-minimal

i2c md 50 0.2 10
0000: 4e 58 49 44 30 78 37 30 00 00 00 00 00 00 00 00    NXID0x70........
=> i2c mw 50 0.2 1 1
=> i2c md 50 0.2 10
0000: 01 58 49 44 30 78 37 30 00 00 00 00 00 00 00 00    .XID0x70........ 

=> i2c md 50 0.2 40
0000: 01 58 49 44 30 78 37 30 00 00 00 00 00 00 00 00    .XID0x70........
0010: ff ff ff ff ff ff ff ff ff ff ff ff 00 00 00 01    ................
0020: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
0030: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
=> i2c mw 50 0.2 0a 40
=> i2c md 50 0.2 40


SPI
1. sf probe

To detect the SPI NOR flash
syntax: sf probe [bus:]cs [hz] [mode]
sf probe 2:0

2.sf erase

It is used to erase the erase blocks.
syntax:sf erase offset len
sf erase 0x0 0x300000

3.sf write

syntax: sf write mem-addr offset len
sf write 0x42000000 0x0 0x300000

4.sf read

syntax: sf read mem-addr offset len
sf read 0x42000000 0x0 0x300000

----------------------------------------------------------------------------

CONFIG_SPI_FLASH_STMICRO=y nand

tftp -g -r SPI_ADC 172.16.2.91
chmod a+x SPI_ADC 

#define CONFIG_CMD_SF
#define CONFIG_SPI_FLASH_BAR
#define CONFIG_SF_DEFAULT_SPEED	10000000
#define CONFIG_SF_DEFAULT_MODE	0
#define CONFIG_SPI_FLASH_CS 0
#define CONFIG_DEFAULT_SPI_BUS  0

SPI ADC changes in DTB,Kernel
DTB-> add spinode
kernel>add enable spi_dev 

##MRAM and CPLD:
	add IFC configs in git/includes/configs/t102xrdb.h
	add tlb entry in git/board/freescale/t1024rdb/tlb.c
	add law entry in git/board/freescale/t1024rdb/law.c

	MRAM DTS
		mram@0,0 {
				compatible = "everspin,mram", "mtd-ram";
				reg = <0x0 0x0 0x80000>;
				bank-width = <2>;
			};

##Compress everything into a tar:
	cd /
	sudo tar -zc -f /tmp/rootfs.tar.gz *

##Saving of actuall filesystem:
	sudo dd if=/dev/sdX of=/tmp/meinImage.img

##Restore the backup:
	sudo dd if=/tmp/meinImage.img of=/dev/sdX

##Disable core:
	echo 0 > /sys/devices/system/cpu/cpu3>online  /*in linux*/
	(or)
	Run command from uboot
		cpu 1 disable
	include/configs/t1024rdb.h #define	CONFIG_EXTRA_ENV_SETTINGS add "maxcpus=1\0" /*uboot*/
	(or)
	call cpu_disable(1) at board/Freescale/t102xRDB.c @checkboard()
	
##Build uboot yocto:
	cd /opt/CCC/QorIQ-SDK-V2.0-20160527-yocto
	source fsl-setup-env -m t1024rdb
	bitbake -c cleansstate u-boot /*for first time*/
	bitbake -c patch u-boot 	  /*for first time*/
	bitbake -c compile -f u-boot
	bitbake u-boot
	see bin at deploy dir
##Add kernel module
	copy QorIQ-SDK-V2.0-20160527-yocto/sources/poky/meta-skeleton/recipes-kernel/hello-mod to layer eg: /sources/meta-freescale/recipes-kernel
	customize .c file	
	rename .bb file and Makefile of module
	add 
		CORE_IMAGE_EXTRA_INSTALL += "reflash" 	
	to /sources/meta-freescale/recipes-fsl/images/fsl-image-minimal file
	Run command
		bitbake cleansstate reflash
		bitbake reflash
	compiled out put will be at build_t1024rdb/tmp/work/t1024rdb-fsl-linux/reflash

******************SimpliFi******************
##Artik530 custom build:
	mkdir artik533s
	cd artik533s
	repo init -u https://github.com/SamsungARTIK/manifest.git -m artik533s_bsp.xml
	repo sync
	cd build-artik
	./release.sh -c config/artik530_ubuntu.cfg  --local-rootfs ~/rootfs.tar.gz

##Usb driver for Quictel:
	enable USB driver for GSM and CDMA modems in kernel
 	Device Drivers →
		[*] USB Support →
			[*] USB Serial Converter support →
				[*] USB driver for GSM and CDMA modems
##Fuel gauge(LTC2941/3) support in kernel:
	Enable
	-> Device Drivers 
		-> Power supply class support (POWER_SUPPLY [=y])
			->  <*>   LTC2941/LTC2943 Battery Gauge Driver 
##Battery charger(TI BQ25890) support in kernel:
	Enable
	-> Device Drivers 
		-> Power supply class support (POWER_SUPPLY [=y])
			->  <*>   TI BQ25890 battery charger driver  
##LED Driver(TI LP55231) support in kernel:
	Enable
	-> Device Drivers
      -> LED Support (NEW_LEDS [=y]) 
	add led node in device tree (see am335.boneblack1.dtb at tftp)
		lp55231@32 {
				compatible = "ti,lp55231";
				label = "lp5521_pri";
				reg = <0x32>;
				clock-mode = /bits/ 8 <1>;

				chan0 {
					chan-name = "d1";
					led-cur = /bits/ 8 <0x14>;
					max-cur = /bits/ 8 <0x20>;
				};
			~~~/upto channel 8/~~~
	toggle led: echo "1" > sys/class/leds/d1/brightness
##Zigbee test:
	install latest tool
		apt install zigbeed
	
	systemctl start zigbee-daemon [Enter]
	zigbee-test [Enter]
	You may get a preliminary screen; choose [1] [Enter] to Add new device
	Choose [1] [Enter] to become an On/Off Switch (or [3] [Enter] for On/Off Light on 2nd A5/7/10)
	Hit [Enter] by itself, to accept the default endpoint assignment
	[0] [Enter] to finish.
	[2] [Enter] to form a network(advanced)
	Preferred channel (11, 14, 15, 19, 20, 24, 25)
	Set channel(25): 15
	Preferred TX (-9 ~ 8)
	Set TX(2):8
	Set PAN ID(0x1234):0x1234
	[0] [Enter] Permit join.
	Done!
##PPP support:
	enable support for ppp in kernel(enable all keyword)
	download https://ppp.samba.org/download.html 
	compile (add sudo apt install --reinstall build-essential)//user space
	copy /usr/local/sbin/chat to /usr/sbin/
	copy quectel-chat-connect  quectel-chat-disconnect  quectel-ppp to /etc/ppp/peers/ (/media/simplify/ppp/peers)
	copy chap-secrets  connect-errors  options  pap-secrets  resolv.conf to /etc/ppp
##gcc support for ubuntu RTFS:
	sudo apt install --reinstall build-essential 
##Change kernel configuration:
	make ARCH=arm artik530_raptor_defconfig
	make ARCH=arm menuconfig
	make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage -j4
	//to save it in /arch/arm/configs rename .config to simpliFi_defconfig
	//change export KERNEL_DEFCONFIG=artik530_raptor_defconfig simpliFi_defconfig to export				   KERNEL_DEFCONFIG=simpliFi_defconfig in /build-artik/config/artik530.cfg file
	//then ./release.sh -c config/artik530_ubuntu.cfg  --local-rootfs rootfs.tar.gz
	//or ./release.sh -c config/artik533s_ubuntu.cfg  --local-rootfs /simplifi/artik533/rootfs.tar.gz
##Print variable in makefile:
	add rule :print-%  : ; @echo $* = $($*)
	then make print-VARIABLE
##Rootfs mkrootfs_image.sh size issue fix
	edit mkrootfs_image.sh line:30 to
		resize2fs -f $TARGET_DIR/rootfs.img 2048M
##update kernel dtb modules in artik
	copy these files to board
		scp arch/arm/boot/zImage root@{YOUR_BOARD_IP}:/root
		scp arch/arm/boot/dts/s5p4418*.dtb root@{YOUR_BOARD_IP}:/root
		scp usr/modules.img root@{YOUR_BOARD_IP}:/root
	on your board
		mount -o remount,rw /boot
		cp /root/zImage /boot
		cp /root/s5p4418*.dtb /boot
		dd if=/root/modules.img of=/dev/mmcblk0p5
		sync
		reboot
##Compile dtb:
	clean dtb's /arch/arm/boot/dts/ folder
	make ARCH=arm artik530_raptor_defconfig
	make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- dtbs
	
********************BBB*********************
##Building u-boot:
	make ARCH=arm CROSS_COMPILE=${CC} distclean
	make ARCH=arm CROSS_COMPILE=${CC} am335x_evm_defconfig
	make ARCH=arm CROSS_COMPILE=${CC}
##Install arm compiler:
	wget -c https://releases.linaro.org/components/toolchain/binaries/6.4-2017.11/arm-linux-gnueabihf/gcc- 			  linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf.tar.xz
	tar xf gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf.tar.xz
	export CC=`pwd`/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-
##tftp boot:
	setenv serverip 172.16.2.25
	setenv autoload no
	dhcp
	tftp 0x82000000 zImage 
	tftp 0x88000000 am335x-boneblack.dtb
	setenv bootargs console=ttyO0,115200n8 root=/dev/mmcblk0p2 ro rootfstype=ext4 rootwait
	bootz 0x82000000 - 0x88000000
##Cross compile kernel module:
	create a c file
	create Makefile
		PWD := $(shell pwd)
		obj-m += bq2589x_charger.o bq2589x_reg.h

		all:
			make ARCH=arm CROSS_COMPILE=$(CROSS) -C $(KERNEL) SUBDIRS=$(PWD) modules
		clean:
			make -C $(KERNEL) SUBDIRS=$(PWD) clean
	run cmd 
		make KERNEL=/media/user/36dee370-d7fc-437b-932c-6b1f5cf2139a/simplify/artik530/linux-artik CROSS=${CC}
##Mount Disk Image: 
	Eg: image name =sdimage.img
	find partition details 
		fdisk -u -l sdimage.img
	find the start address and block size of partition to be mounted and mount it
		sudo mount -o loop,offset=start_addr*blk_size sdimage.img /media/test
##Rootfs transfer:
	rsync -avxHAX --progress / /new-disk/
	use this for best rsync -axHAWXS --numeric-ids --info=progress2
##Play a movie:
	ARTIK 530/710/1020 MIPI
	mplayer -vo fbdev2 -framedrop -vf rotate=1 sample.mp4
	ARTIK HDMI
	mplayer -vo fbdev2 -framedrop sample.mp4
##i2c in linux: refer@ https://opensourceforu.com/2015/01/writing-i2c-clients-in-linux/
	struct i2c_adapter: There can be multiple buses in the device each of them represented with  defined in include/linux/i2c.h.
	The important fields are 
		1.bus number- number provided to the adapter.
		2.i2c algorithm- protocol which adapter works (one of pca, pcf or bitbanging).
	struct i2c_client: Each device connected to i2c device is a i2c client represented by .
	The important fields are 
		1.Name-Name of the device
		2.interrrupt number- Number of the interrupt line of the device
		3.i2c-adapter- This is the struct i2c_adapter which represent i2c bus in which is connected
	struct i2c_driver: For each device there will be one i2c driver to control it which represented by 
	THe important fields are
		1.Driver name- The name of the driver that used by the device to match the driver
		2.Probe- probe function pointer
	the i2c_client structure is not initialized directly, instead struct i2c_board_info is defined at board file (eg:/arch/arm/mach-imx/mac-pcm043.c:#119).This Structure copied o the 		i2c_client structure during initialization.
	the struct i2c_board_info has following imp: fields
		type: name of the device (copied to the field :name in the i2c_client structure).
		addr: i2c address of device. 
		irq : irq num
	an array structure is created in the board file.
	i2c Device registration:
		Its a process with which the kernel informed about the device present on the i2c bus. The i2c devices are registered using i2c_board_info structure.The kernel get info about 		i2c devices addr,bus,irq and create i2c_device_list. Once the i2c adapter which represent this bus then the i2c_client struct is created. I2C device registration can be done in 2 		ways
	1)when the i2c bus number is known: devices are registered using
		int i2c_register_board_info(int busnum, struct i2c_board_info *info, unsigned len);
	where     
		busnum:is the bus number 
    	info: the i2c_board_info structure of the device
		len: number of elements in info array
	this funtion will link the i2c_baord_info structure in __i2c_board_list which is a global linked list.Now when the i2c adapter is registered using i2c_register_adapter(defined in 		i2c/i2c-core.c),it will search for the device have same bus number as the adapter through i2c_scan_static_board_info API if i2c_board_info structure is found then a i2c_client    		object is created using i2c_new_device api.The fields in the client object is filled using info object and new device is registered in the i2c subsystem. During the registeration 		the system matches with the name if the i2c client created. If any driver name matched with the i2c client then probe routine of the driver in called. 
	2)In some cases the instead of bus number the adapter number of device connected is known is such case the device is registered using i2c
		struct i2c_client *	i2c_new_device(struct i2c_adapter *adap, struct i2c_board_info const *info);
	where	
		adap: structure representing i2c adapter
		info: i2c board info object of each devices 

##Interrupt in linux:
	
	

******************wagr******************

##Adb connecting:
	install adb devices tools
		sudo apt-get install android-tools-adb
	restart service
		adb kill-server
		sudo adb start-server
	access device
		adb devices
		adb shell

##Input device data interpretation:
	format
		hexdump Bytecount | time stamp | type,code,value
	structure
		struct input_event {
		struct timeval time;
		__u16 type;
		__u16 code;
		__s32 value;
		};
		eg 00000000 | 4b a7 fb 4b e9 93 05 00 | 04 00 04 00 1e 00 07 00
##Wagr driver compilation:
	MACHINE=mdm9607 bitbake -fc cleanall linux-quic
	MACHINE=mdm9607 bitbake linux-quic -c menuconfig //check wagr: is added in config
	MACHINE=mdm9607 bitbake linux-quic -c compile -f
	MACHINE=mdm9607 bitbake linux-quic
##i2c details:
	cd /sys/firmware/devicetree/base/soc/i2c@78b8000 
##wagr app running
	export `cat /data/bus_addr.txt`

##Regular expression:
	.       - Any Character Except New Line
	\d      - Digit (0-9)
	\D      - Not a Digit (0-9)
	\w      - Word Character (a-z, A-Z, 0-9, _)
	\W      - Not a Word Character
	\s      - Whitespace (space, tab, newline)
	\S      - Not Whitespace (space, tab, newline)

	\b      - Word Boundary
	\B      - Not a Word Boundary
	^       - Beginning of a String
	$       - End of a String

	[]      - Matches Characters in brackets
	[^ ]    - Matches Characters NOT in brackets
	|       - Either Or
	( )     - Group

	Quantifiers:
	*       - 0 or More
	+       - 1 or More
	?       - 0 or One
	{3}     - Exact Number
	{3,4}   - Range of Numbers (Minimum, Maximum)


	#### Sample Regexs ####

	[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+
##memory dump of a process
	cat /proc/{PID}/statm
		size (mapped to VIRT), 
		resident (mapped to RES), 
		share (mapped to SHR), 
		text (mapped to CODE), 
		lib (always 0 on Linux 2.6+), 
		data (mapped to DATA) and 
		dt (always 0 on Linux 2.6+, mapped to nDrt).
##Core dump:
	pattern : cat /proc/sys/kernel/core_pattern
##ftp server 
	ssh root@139.59.68.161
	pass:mobi*s*****
## lib curl ftps config while installing
	download libcurl source
	./configure --with-libssh2
	make
	sudo make install
## wakelock module library
	libtrakrutils.so -> /usr/lib

